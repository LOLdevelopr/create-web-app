{"version":3,"sources":["generators/app/utils/questions.ts","generators/app/utils/pkgjsonUtils.ts","generators/app/index.ts","index.ts"],"names":[],"mappings":"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","file":"cli.js","sourceRoot":"..","sourcesContent":["/* eslint-disable */\r\n\r\n\r\nconst validate = (val : string): boolean | string => val.length > 0 ? true : \"Please enter the name\"\r\n\r\n\r\nconst questions : Array<Object> = [{\r\n    type: \"input\",\r\n    name: \"projectName\",\r\n    message: \"Please Enter Your Project Name [ Required ] :  \",\r\n    validate\r\n  },\r\n  {\r\n    type: \"input\",\r\n    name: \"description\",\r\n    message: \"Please Enter your project description : \",\r\n    default: \"Awesome Project !!\"\r\n  },\r\n  {\r\n    type: \"input\",\r\n    name: \"author\",\r\n    message: \"Please Enter your project author : \",\r\n    default : \" \"\r\n  },\r\n  {\r\n    type: \"rawlist\",\r\n    name: \"stack\",\r\n    message: \"Please Select Project Stack [ Required ] : \",\r\n    choices: [\r\n      \"MERN ==> MongoDB + Express + React + Node\",\r\n      \"TMEN ==> Typescript + MongoDB + Express + Node\",\r\n      \"MERNG ==> MongoDB + Express + React + Node + GraphQL (Not stable yet)\"\r\n    ],\r\n    validate,\r\n    filter : (val : string) : string => val.split(\"==>\")[0].trim()\r\n  },\r\n  {\r\n    type: \"rawlist\",\r\n    name: \"bundler\",\r\n    message: \"Please Select Project bundler [ Required ] : \",\r\n    choices: [\r\n      \"Webpack\",\r\n      \"Parcel\",\r\n    ],\r\n    validate\r\n  },\r\n  {\r\n    default: \"0.0.1\",\r\n    message: \"Please Enter Version : \",\r\n    name: \"version\",\r\n    type: \"input\",\r\n  },\r\n  {\r\n    default: \"\",\r\n    message: \"Please Enter Your Scaffold Github Repo for package.json file : \",\r\n    name: \"githubRepo\",\r\n    type: \"input\",\r\n  },\r\n  {\r\n    default: \"\",\r\n    message: \"Please Enter Your Scaffold license for package.json file :\",\r\n    name: \"license\",\r\n    type: \"input\",\r\n  }\r\n\r\n]\r\n\r\n\r\nexport default questions;\r\n","import {\r\n  IPkgJson,\r\n  IPkgJsonFromTemplate\r\n} from '../type/pkgjson';\r\nimport * as _ from \"lodash\";\r\n\r\n\r\n\r\n\r\nexport const createPkgJsonWithWebpack = (pkgjsonFromTemplate: IPkgJsonFromTemplate, pkgjson: IPkgJson): IPkgJson | IPkgJsonFromTemplate => {\r\n  /*\r\n  The present template for any Stack is build with webpack only\r\n   Return the same package.json for now\r\n   Can update it later in order when removing the default webpack configs from the template\r\n   Will do it when adding more bundlers like I dont know\r\n\r\n  */\r\n  pkgjsonFromTemplate = _.assign(pkgjsonFromTemplate,pkgjson)\r\n  return pkgjsonFromTemplate;\r\n}\r\n\r\n\r\nexport const createPkgJsonWithParcel = (pkgjsonFromTemplate: IPkgJsonFromTemplate, pkgjson: IPkgJson): IPkgJson | IPkgJsonFromTemplate => {\r\n  const scripts = {\r\n    \"build:server\": \"parcel build --no-autoinstall  ./src/server/index.js --target node --out-dir ./bin --out-file server.js\",\r\n    \"build:client\": \"parcel build --no-autoinstall  ./src/client/index.js  --out-dir ./public/js/ --out-file app.bundle.js\",\r\n    \"watch:server\": \"parcel watch --no-autoinstall  ./src/server/index.js --target node --out-dir ./bin --out-file server.js\",\r\n    \"watch:client\": \"parcel watch --no-autoinstall  ./src/client/index.js  --out-dir ./public/js/ --out-file app.bundle.js\",\r\n    \"build\": \"npm run build:client && npm run build:server \",\r\n    \"watch\": \"npm run watch:client && npm run watch:server \"\r\n  }\r\n  pkgjsonFromTemplate.scripts = _.assignIn(pkgjsonFromTemplate.scripts,scripts);\r\n  pkgjsonFromTemplate.devDependencies = _.assignIn(pkgjsonFromTemplate.devDependencies, {\r\n    \"parcel-bundler\": \"^1.12.3\"\r\n  })\r\n\r\n  /*\r\n\r\n  Need to remove the hard-coded devDependecies in the [] which we need to omit\r\n\r\n   _.omit(pkgjsonFromTemplate.devDependencies,Object.keys(JSON.parse(/webpack/g.exec(JSON.stringify(pkgjsonFromTemplate.devDependencies)))))\r\n\r\n  */\r\n\r\n  pkgjsonFromTemplate.devDependencies = _.omit(pkgjsonFromTemplate.devDependencies, [\r\n    \"webpack\",\r\n    \"webpack-cli\",\r\n    \"webpack-dev-server\",\r\n    \"webpack-node-externals\"\r\n  ])\r\n\r\n\r\n\r\n  pkgjsonFromTemplate = _.assign(pkgjsonFromTemplate,pkgjson)\r\n  return pkgjsonFromTemplate\r\n}\r\n","import Generator from \"yeoman-generator\";\r\nimport promptQuestions from \"./utils/questions\";\r\nimport * as path from 'path';\r\nconst {\r\n  error,\r\n  loading,\r\n  info\r\n} = require(\"prettycli\")\r\nimport * as fs from 'fs';\r\nimport {\r\n  IAnswer\r\n} from './type/answer'\r\nimport {\r\n  IPkgJson,\r\n  IPkgJsonFromTemplate\r\n} from './type/pkgjson';\r\nimport {\r\n  createPkgJsonWithParcel,\r\n  createPkgJsonWithWebpack\r\n} from './utils/pkgjsonUtils'\r\nconst CFonts = require('cfonts');\r\n\r\n\r\nexport default class StarterGenerator extends Generator {\r\n  private answers: IAnswer\r\n  private pkgjson: IPkgJson\r\n\r\n\r\n\r\n  constructor(args, opts) {\r\n    super(args, opts);\r\n\r\n\r\n    CFonts.say('Create|Web App', {\r\n      font: 'simple3d',\r\n      align: 'left',\r\n      colors: ['yellowBright'],\r\n      background: 'transparent',\r\n      letterSpacing: 1,\r\n      lineHeight: 1,\r\n      space: true,\r\n      maxLength: '0',\r\n    });\r\n\r\n  }\r\n  public async prompting() {\r\n    const done: () => {} = this.async();\r\n    // Have Yeoman greet the user.\r\n\r\n    return this.prompt(promptQuestions)\r\n      .then(\r\n        (answer: IAnswer) : void | PromiseLike<void> => {\r\n          this.answers = answer;\r\n          const tmppkgjsonFromAnswer: IPkgJson = {\r\n            name: answer.projectName,\r\n            author: answer.author,\r\n            license: answer.license,\r\n            description: answer.description,\r\n            repo: answer.githubRepo,\r\n            keywords: [answer.stack]\r\n          }\r\n          loading(\"CREATING\", \"Cooking your project ! Please wait ...\")\r\n          fs.readFile(\r\n            path.join(__dirname,`../generators/app/templates/${answer.stack}/package.json`), {\r\n              encoding: 'utf-8'\r\n            },\r\n            async (err, data) => {\r\n              if (err) {\r\n                error(\"File Not Found, Internal Error.Please Report an issue\")\r\n                return\r\n              } else {\r\n                let pkgjsonFromTemplate: IPkgJsonFromTemplate = JSON.parse(data)\r\n                const {\r\n                  bundler\r\n                } = answer\r\n                pkgjsonFromTemplate = bundler == \"Webpack\" ? createPkgJsonWithWebpack(pkgjsonFromTemplate, tmppkgjsonFromAnswer) : bundler == \"Parcel\" ? createPkgJsonWithParcel(pkgjsonFromTemplate, tmppkgjsonFromAnswer) : pkgjsonFromTemplate\r\n\r\n                // Now will use this this.pkjson to write to the package.json file after copying of the files\r\n                this.pkgjson = {\r\n                  ...pkgjsonFromTemplate\r\n                }\r\n                done()\r\n              }\r\n            });\r\n        });\r\n  }\r\n\r\n\r\n  public writing() {\r\n    info(\"DONE\", \"Copying your project.....\")\r\n\r\n\r\n    this.fs.copy(\r\n      this.templatePath(path.join(__dirname,`../generators/app/templates/${this.answers.stack}`)),\r\n      this.destinationPath(path.resolve(this.answers.projectName))\r\n    );\r\n    info(\"DONE\", \"Writing your dependencies and scripts.....\")\r\n\r\n    this.fs.writeJSON(`${path.resolve(__dirname,this.answers.projectName)}/package.json`, this.pkgjson)\r\n\r\n  }\r\n\r\n\r\n  public install() {\r\n    this.installDependencies({\r\n      npm: true,\r\n      bower: false,\r\n    });\r\n  }\r\n\r\n}\r\n","#!/usr/bin/env node\r\n\r\n\r\nimport yeoman from \"yeoman-environment\";\r\nimport generator from \"./generators/app/index\";\r\nconst env = yeoman.createEnv();\r\n\r\nconst projectName : any = \"create-web-app\";\r\n\r\nenv.registerStub(generator,projectName);\r\n\r\nenv.run(projectName);\r\n"]}